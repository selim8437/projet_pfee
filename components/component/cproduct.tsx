/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/geFSVqGHdyR
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"
import { JSX, SVGProps, useEffect, useState } from "react"
import { Product } from "@/app/lib/types/prduct"
import { createProduct } from "@/app/lib/products"
import { useUser } from "@clerk/nextjs"
import ButtonUpload from "@/app/ui/uploader-button";
import { v4 } from "uuid";
import { getStoreId } from "@/app/lib/users";


export function Cproduct() {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState(0);
  const [quantity, setQuantity] = useState(0);
  const [specifications, setSpecifications] = useState('');
  const [images, setImageUrls] = useState(['a', 'a', 'a']);
  const [test, setTests] = useState([true, true, true]);
  const { user } = useUser();
  const [storeId, setStoreId] = useState<string | null>(null);
  const [userId, setUserId] = useState<string | null>(null);

  const getStoreid=async ()=>{
    if (user?.id) {
      const cat :string =await getStoreId(user?.id);
      setStoreId(cat)
    }
  }
  useEffect( () => {
    getStoreid() ;
  }, [user]);

  const handleImageUrlChange = (url: string, index: number) => {
    const currentImages = [...images];
    
    currentImages[index] = url;
    setImageUrls(currentImages);
    const newTestChanged = [...test];
    newTestChanged[index] = false;
    setTests(newTestChanged);
  };

  const handleChangeButton = (index: number): void => {
    const newImageChanged = [...test];
    newImageChanged[index] = true;
    setTests(newImageChanged);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    let id=v4() ;
    const updatedProduct: Product = { id, title, description, price, quantity, images, specifications, storeId: storeId || '' };
    createProduct(updatedProduct) 
      .then(() => {
        // Call the onProductUpdate callback function after successful update
        onProductUpdate();
      })
      .catch((error) => {
        console.error("Error creating product:", error);
      });
  };
  return (
    <div className="max-w-2xl mx-auto p-6 md:p-8 lg:p-10">
      <div className="space-y-6 ">
        <div>
          <h1 className="text-3xl text-white font-bold">Create a new product</h1>
          <p className="text-white">Fill out the form to add a new product to your store.</p>
        </div>
        <form className="grid gap-6 " onSubmit={handleSubmit}>
          <div className="grid gap-2">
            <Label className='text-white' htmlFor="name">Product Name</Label>
            <Input id="name" placeholder="Enter product name"     onChange={(e) => setTitle(e.target.value)}
/>
          </div>
          <div className="grid gap-2">
            <Label className='text-white' htmlFor="description">Product Description</Label>
            <Textarea className="min-h-[100px]" id="description" placeholder="Enter product description"    
            onChange={(e) => setDescription(e.target.value)}
 />
          </div>
          <div className="grid gap-2">
            <Label className='text-white' htmlFor="price">Price</Label>
            <Input id="price" placeholder="Enter product price"               onChange={(e) => setPrice(+e.target.value)}
 />
          </div>
          <div className="grid gap-2">
            <Label className='text-white' htmlFor="quantity">Quantity</Label>
            <Input id="quantity" placeholder="Enter product quantity"                onChange={(e) => setQuantity(+e.target.value)}
 />
          </div>
          <div className="grid gap-2">
            <Label className='text-white' htmlFor="specifications">Specifications</Label>
            <Input id="specifications" placeholder="Enter product specifications"  onChange={(e) => setSpecifications(e.target.value)}
/>
          </div>
          <div className="grid gap-4">
            <div className="grid gap-2">
              <Label className='text-white'>Product Images</Label>
              
              <div className="grid grid-cols-3 gap-4">
              {images.map((image, index) => (
                <div key={index} className="relative group">
                  {test[index]?(
                <ButtonUpload onImageUrlChange={(a) => handleImageUrlChange(a, index)}/>
                  ):(
                  <div>
                    <img
                      alt="Product Image"
                      className="aspect-square object-cover rounded-md"
                      height={100}
                      src={image}
                      width={100}
                     />
                    <Button onClick={() => handleChangeButton(index)} className="mt-2" size="sm" variant="outline">
                           Change Image
                    </Button>
                  </div>)}
                </div>
              ))}
              </div>
            </div>
          </div>
          <Button className="w-full bg-teal-500" type="submit">
            Create Product
          </Button>
        </form>
      </div>
    </div>
  )
}

function PlusIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}
function onProductUpdate() {
  throw new Error("Function not implemented.");
}

