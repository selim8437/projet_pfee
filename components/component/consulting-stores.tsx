/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Gbn0UvTVEwD
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Rethink_Sans } from 'next/font/google'

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { TableHead, TableRow, TableHeader, TableCell, TableBody, Table } from "@/components/ui/table";
import { JSX, SVGProps, useEffect, useState } from "react";
import DashboardSkeleton from "@/app/ui/skeletons";
import { deleteStoreById, getAllStoresAdmin, verifyStore } from "@/app/lib/stores";
import { Store } from "@/app/lib/types/store";


export function ConsultingStores() {
  const [stores, setstores] = useState<Store[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState(""); // State to store the search query

  
  
  const fetchStores = async () => {
    try {
      

      const fetchedStores = await getAllStoresAdmin();
      if (fetchedStores) {
        setstores(fetchedStores);

        console.log('stores fetched');

      }
      
      
    } catch (error) {
      console.error("Error fetching stores:", error);
    } finally {
      setIsLoading(false);
    }
  };


  useEffect(() => {
    fetchStores();
    console.log('waiting')
  }, []);

  const deleteStore = async (storeId: string) => {
    try {
      await deleteStoreById(storeId);
      await fetchStores(); // Update user list after deleting
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  };
  
  const verifyStor=(e:string)=>{
    verifyStore(e,'verified')
  }
  const declineStore=(e:string)=>{
    verifyStore(e,'declined')
  }
  const handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
  };
  
 
const filteredStores= stores.filter((store) =>
  store.name.toLowerCase().startsWith(searchQuery.toLowerCase())
);
  return (
    <>
      {isLoading ? (
        <div><DashboardSkeleton /></div>
      ) : (
        <div >
          <div className="grid gap-6 md:gap-8">
      <div className="flex justify-center items-center ">
  <div className="w-full max-w-screen-lg">
    <div className="relative">
      <div className="absolute left-3 top-1/2 -translate-y-1/2">
        <SearchIcon className="h-4 w-4 text-gray-500 dark:text-gray-400" />
      </div>
      <Input
        className="w-full rounded-md bg-white px-8 py-2 pl-8 text-sm shadow-sm transition-colors focus:outline-none focus:ring-1 focus:ring-gray-900 dark:bg-gray-800 dark:text-black-50 dark:focus:ring-gray-300"
        placeholder="Search Stores..."
        type="search"
        value={searchQuery}
        onChange={handleSearchInputChange}
      />
    </div>
  </div>
</div>
</div>
        <div className="mx-auto px-8 py-16">
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
          <Table className="w-full table-auto">
            <TableHeader className="bg-gray-100 text-gray-600 font-medium">
          
          
              <TableRow>
                <TableHead>Id</TableHead>
                <TableHead>Name</TableHead>
                <TableHead>Logo</TableHead>
                <TableHead>Banner</TableHead>
                <TableHead>Verif Url</TableHead>
                <TableHead>VerifState</TableHead>
                
                <TableHead></TableHead>

              </TableRow>
            </TableHeader>
              
               <TableBody>
  {filteredStores.slice(0, 5).map((store, index) => (
    <TableRow key={index}>
     
      <TableCell className="font-medium">{store.id}</TableCell>
      <TableCell>{store.name}</TableCell>
      <TableCell><img src={store.logo} alt="" /></TableCell>
      <TableCell><img src={store.banner} alt="" /></TableCell>
            <TableCell><img src={store.verifUrl} alt="" /></TableCell>
      <TableCell>{store.verifState}</TableCell>
      
      <TableCell>
      {store.verifState==='pending'&&(

        <div className="flex gap-2">
          <Button className='bg-green-500' onClick={() => verifyStor(store.id)}>Verify</Button>
          <Button className='bg-red-500' onClick={() => declineStore(store.id)}>Decline</Button>
        </div>
              )}

      </TableCell>
    </TableRow>
  ))}
</TableBody>


              
          </Table>
          </div>
          </div>
          
        </div>
      )}
    </>
  );
}










function SearchIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}