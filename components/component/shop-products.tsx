/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/C5ysfFObn3q
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
import { getProducts, getProductsBuyer } from "@/app/lib/products";
import { Product } from "@/app/lib/types/prduct";
import { Button } from "@/components/ui/button"
import { useContext, useEffect, useState } from "react";
import { ImagesSlide } from "./images-slide";
import { SearchIcon } from "lucide-react";
import { Input } from "../ui/input";
import { BannerProd } from "./banner-prod";
import { getStoreByShopid, getStoreByid } from "@/app/lib/stores";
import { Store } from "@/app/lib/types/store";
import { MyContext } from "./context";


interface Props {
  shopId: string;
  
}

export function ShopProducts({ shopId }: Props) {
  const [products, setProducts] = useState<Product[]>([]);
  const [cart, setCart] = useState<Product[]>([]);
  const [shop,setShop]=useState<Store | null>(null) ;
  const [searchQuery, setSearchQuery] = useState(""); // State to store the search query

  const context = useContext(MyContext);
  if (!context) {
    throw new Error('MyComponent must be used within a MyProvider');
  }

  const { num, setNum } = context;
  const fetchProducts = async () => {
      try {
          const fetchedProducts = await getProductsBuyer(shopId);
          if (fetchedProducts) {
              setProducts(fetchedProducts);
          }
      } catch (error) {
          console.error("Error fetching products:", error);
      }
  };
 
  const getStore=async()=>{
    try {
      const ftechedStore =await getStoreByShopid(shopId);
      if(ftechedStore){
        setShop(ftechedStore);
      }

    }catch(error) {
      console.error("Error fetching products:", error);
  
    }

  }
  
  useEffect(() => {
      fetchProducts();
      getStore();

      
  }, [shopId]);
  useEffect(() =>{
    sessionStorage.setItem('myData', JSON.stringify(cart));
    setNum(cart.length.toString());
    console.log('Cart updated:'); // Log the updated cart
    sessionStorage.setItem('num',cart.length.toString());
  },[cart])
  const addProductToCart = (product: Product) => {
    setCart(prevCart => [...prevCart, product]);
   
};
const handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setSearchQuery(event.target.value);
};

// Filter the shops based on the search query
const filteredProducts = products.filter((product) =>
  product.title.toLowerCase().startsWith(searchQuery.toLowerCase())
);
  return (
    <main className="w-full max-w-6xl mx-auto px-4 md:px-6 py-12 md:py-16 lg:py-20">
      <BannerProd src={shop?.banner ?? "/bannerPLaceHolder.png"}/>
      <br></br>
      <div className="grid gap-6 md:gap-8">
      <div className="flex justify-center items-center ">
  <div className="w-full max-w-screen-lg">
    <div className="relative">
      <div className="absolute left-3 top-1/2 -translate-y-1/2">
        <SearchIcon className="h-4 w-4 text-gray-500 dark:text-gray-400" />
      </div>
      <Input
        className="w-full rounded-md bg-white px-8 py-2 pl-8 text-sm shadow-sm transition-colors focus:outline-none focus:ring-1 focus:ring-gray-900 dark:bg-gray-800 dark:text-black-50 dark:focus:ring-gray-300"
        placeholder="Search products..."
        type="search"
        value={searchQuery}
        onChange={handleSearchInputChange}
      />
    </div>
  </div>
</div>
      
<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
  {filteredProducts.map((product, index) => (
    <div className="bg-gray-900 rounded-lg shadow-md overflow-hidden  border-gray-900" key={index}>
      <ImagesSlide images={product.images} />
      <div className="p-4 bg-gray-900 border-t border-gray-900">
        <h3 className="text-lg text-white font-semibold mb-2">{product.title}</h3>
        <p className="text-white mb-4">${product.price}</p>
        <Button onClick={() => addProductToCart(product)} className="w-full" size="sm">
          Add to Cart
        </Button>
      </div>
    </div>
  ))}
</div>

    
    </div>
    </main>
  );
}
